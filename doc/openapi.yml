openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: UserController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /artist:
    post:
      operationId: ArtistController_create
      summary: create new artist
      parameters: []
      requestBody:
        required: true
        description: Data for new artist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Request body does not contain required fields
      tags:
        - Artist
    get:
      operationId: ArtistController_findAll
      summary: get all artists
      parameters: []
      responses:
        '200':
          description: Artists successfully getted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artist
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          description: Id of artist
          schema:
            type: string
      responses:
        '200':
          description: Artist successfully getted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Artist id is invalid (not UUID)
        '404':
          description: Artist with given id not found
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      summary: update artist info
      parameters:
        - name: id
          required: true
          in: path
          description: Id of artist
          schema:
            type: string
      requestBody:
        required: true
        description: Data for update album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Artist successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Artist id is invalid (not UUID)
        '404':
          description: Artist with given id not found
      tags:
        - Artist
    delete:
      operationId: ArtistController_remove
      summary: delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: Id of artist
          schema:
            type: string
      responses:
        '204':
          description: Artist successfully deleted
        '400':
          description: Artist id is invalid (not UUID)
        '404':
          description: Artist with given id not found
      tags:
        - Artist
  /album:
    post:
      operationId: AlbumController_create
      summary: create new album
      parameters: []
      requestBody:
        required: true
        description: Data for new album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Request body does not contain required fields
      tags:
        - Album
    get:
      operationId: AlbumController_findAll
      summary: get all albums
      parameters: []
      responses:
        '200':
          description: Albums successfully getted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Album
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: get single album by id
      parameters:
        - name: id
          required: true
          in: path
          description: Id of album
          schema:
            type: string
      responses:
        '200':
          description: Album successfully getted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Album id is invalid (not UUID)
        '404':
          description: Album with given id not found
      tags:
        - Album
    put:
      operationId: AlbumController_update
      summary: update album info
      parameters:
        - name: id
          required: true
          in: path
          description: Id of album
          schema:
            type: string
      requestBody:
        required: true
        description: Data for update album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Album successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Album id is invalid (not UUID)
        '404':
          description: Album with given id not found
      tags:
        - Album
    delete:
      operationId: AlbumController_remove
      summary: delete album
      parameters:
        - name: id
          required: true
          in: path
          description: Id of album
          schema:
            type: string
      responses:
        '204':
          description: Album successfully deleted
        '400':
          description: Album id is invalid (not UUID)
        '404':
          description: Album with given id not found
      tags:
        - Album
  /track:
    post:
      operationId: TrackController_create
      summary: create new track
      parameters: []
      requestBody:
        required: true
        description: Data for new track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Request body does not contain required fields
      tags:
        - Track
    get:
      operationId: TrackController_findAll
      summary: get all tracks
      parameters: []
      responses:
        '200':
          description: Tracks successfully getted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: get single track by id
      parameters:
        - name: id
          required: true
          in: path
          description: Id of track
          schema:
            type: string
      responses:
        '200':
          description: Track successfully getted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Track id is invalid (not UUID)
        '404':
          description: Track with given id not found
      tags:
        - Track
    put:
      operationId: TrackController_update
      summary: update album track
      parameters:
        - name: id
          required: true
          in: path
          description: Id of track
          schema:
            type: string
      requestBody:
        required: true
        description: Data for update album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Track id is invalid (not UUID)
        '404':
          description: Track with given id not found
      tags:
        - Track
    delete:
      operationId: TrackController_remove
      summary: delete track
      parameters:
        - name: id
          required: true
          in: path
          description: Id of track
          schema:
            type: string
      responses:
        '204':
          description: Track successfully deleted
        '400':
          description: Track id is invalid (not UUID)
        '404':
          description: Track with given id not found
      tags:
        - Track
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: get all favorites
      parameters: []
      responses:
        '200':
          description: Favorites successfully getted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrackToFavorites
      summary: add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of track
          schema:
            type: string
      responses:
        '201':
          description: Track successfully added
        '400':
          description: Track id is invalid (not UUID).
        '422':
          description: Track with given id does not exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrackFromFavorites
      summary: delete track from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of track
          schema:
            type: string
      responses:
        '204':
          description: Track successfully deleted
        '400':
          description: Track id is invalid (not UUID)
        '404':
          description: Track with given id does not found
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbumToFavorites
      summary: add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of album
          schema:
            type: string
      responses:
        '201':
          description: Album successfully added
        '400':
          description: Album id is invalid (not UUID).
        '422':
          description: Album with given id does not exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbumFromFavorites
      summary: delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of album
          schema:
            type: string
      responses:
        '204':
          description: Album successfully deleted
        '400':
          description: Album id is invalid (not UUID)
        '404':
          description: Album with given id does not found
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtistToFavorites
      summary: add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of artist
          schema:
            type: string
      responses:
        '201':
          description: Artist successfully added
        '400':
          description: Artist id is invalid (not UUID).
        '422':
          description: Artist with given id does not exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtistFromFavorites
      summary: delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Id of artist
          schema:
            type: string
      responses:
        '204':
          description: Artist successfully deleted
        '400':
          description: Artist id is invalid (not UUID)
        '404':
          description: Artist with given id does not found
      tags:
        - Favorites
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags:
  - name: hls
    description: ''
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties: {}
    UpdatePasswordDto:
      type: object
      properties: {}
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          description: refers to Artist
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
        - name
        - year
        - artistId
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    Favorite:
      type: object
      properties:
        artists:
          type: array
          items:
            type: string
        albums:
          type: array
          items:
            type: string
        tracks:
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
